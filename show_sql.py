SQL_STMT = "\n\t\tSELECT\n\t\t\tsumm.sale_month AS sale_month_index,\n\t\t\tCAST(summ.sale_month AS STRING) AS sale_month,\n\t\t\t\n\t\ttotal_sales,\n\t\tROUND(total_fee, 2) as total_fee,\n\t\tROUND(total_fee_uw, 2) as total_fee_uw,\n\t\ttotal_claims,\n\t\tROUND(total_claim_cost, 2) as total_claim_cost\n\t,\n\t\t\tIF(claims IS NULL, 0.0, (SELECT MAX(value) FROM UNNEST(claims) value)) AS max_value,\n\t\t\tIF(expected_data IS NULL, [], expected_data) AS expected_data,\n\t\t\tIF(claims IS NULL, [], claims) AS claims\n\t\tFROM (\n\t\t\t\n\t\tSELECT\n\t\t\tx.sale_month AS sale_month,\n\t\t\ttotal_sales, total_fee, total_fee_uw,\n\t\t\tIF(total_claims>0, total_claims, 0) AS total_claims,\n\t\t\tIF(total_claim_cost>0, total_claim_cost, 0.0) AS total_claim_cost\n\t\tFROM (\n\t\t\tSELECT\n\t\t\t\tCAST(FLOOR((sale_week - 1)/4) as INT64) as sale_month,\n\t\t\t\tSUM(sale_count) as total_sales,\n\t\t\t\tSUM(actual_merchant_whol_cost) as total_fee,\n\t\t\t\tSUM(actual_cover_provider_fee) as total_fee_uw\n\t\t\tFROM\n\t\t\t\tanalytics_cover\n\t\t\tWHERE\n\t\t\t\tsale_week <= @saleWeekTo\n\t\t\tGROUP BY\n\t\t\t\tsale_month\n\t\t)x\n\t\tLEFT JOIN (\n\t\t\tSELECT\n\t\t\t\tsale_month,\n\t\t\t\tSUM(claim_count) AS total_claims,\n\t\t\t\tSUM(claim_cost) AS total_claim_cost\n\t\t\tFROM (\n\t\t\t\tSELECT\n\t\t\t\t\tCAST(FLOOR((sale_week - 1)/4) as INT64) as sale_month,\n\t\t\t\t\tCAST(FLOOR(claim_week/4) as INT64) as claim_month,\n\t\t\t\t\t100 - FLOOR((sale_week - 1)/4) + 1 AS earned_month,\n\t\t\t\t\tSUM(claim_count) AS claim_count,\n\t\t\t\t\tSUM(cost_excl_tax) AS claim_cost\n\t\t\t\tFROM\n\t\t\t\t\tanalytics_claim\n\t\t\t\tWHERE\n\t\t\t\t\tsale_week <= @saleWeekTo\n\t\t\t\tGROUP BY\n\t\t\t\t\tsale_month, claim_month, earned_month\n\t\t\t)\n\t\t\tWHERE\n\t\t\t\tclaim_month <= earned_month\n\t\t\tGROUP BY\n\t\t\t\tsale_month\n\t\t)y\n\t\tOn x.sale_month = y.sale_month\n\t\t\n\t\t)summ\n\t\tLEFT JOIN (\n\t\t\t\n\t\tSELECT\n\t\t\tsale_month,\n\t\t\tARRAY(SELECT  IF(SUM(expected_total_fee_uw)>0, ROUND(SUM(claim_cost)/SUM(expected_total_fee_uw)*100.0, 2), 0.0) FROM (SELECT claim_cost[offset(index2)] AS claim_cost, expected_total_fee_uw[offset(index2)] AS expected_total_fee_uw, index1, index2 FROM unnest(claim_months) c1 WITH OFFSET AS index1 cross join unnest(claim_months) c2 WITH OFFSET AS index2 ON index1 >= c2) GROUP BY index1) AS claims, ARRAY(SELECT 70.0 FROM unnest(claim_months) x) AS expected_data\n\t\tFROM (\n\t\t\tSELECT\n\t\t\t\tsale_month,\n\t\t\t\tARRAY_AGG(claim_month - 0) AS claim_months,\n\t\t\t\t\n\t\tARRAY_AGG(claim_count) AS claim_count,\n\t\tARRAY_AGG(claim_cost) AS claim_cost,\n\t\tARRAY_AGG(expected_claims) as expected_claims,\n\t\tARRAY_AGG(expected_claim_cost) as expected_claim_cost,\n\t\tARRAY_AGG(expected_total_sales) AS expected_total_sales,\n\t\tARRAY_AGG(expected_total_fee) AS expected_total_fee,\n\t\tARRAY_AGG(expected_total_fee_uw) AS expected_total_fee_uw\n\t\n\t\t\tFROM (\n\t\t\t\tSELECT\n\t\t\t\t\tb.sale_month AS sale_month, b.claim_month AS claim_month,\n\t\t\t\t\t\n\t\tif(claim_count>0, claim_count, 0) as claim_count,\n\t\tif(claim_cost>0, claim_cost, 0.0) as claim_cost,\n\t\tif(expected_claims>0, expected_claims, 0.0) as expected_claims,\n\t\tif(expected_claim_cost>0, expected_claim_cost, 0.0) as expected_claim_cost,\n\t\tif(expected_total_sales>0, expected_total_sales, 0.0) as expected_total_sales,\n\t\tif(expected_total_fee>0, expected_total_fee, 0.0) as expected_total_fee,\n\t\tif(expected_total_fee_uw>0, expected_total_fee_uw, 0.0) as expected_total_fee_uw\n\t\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT\n\t\t\t\t\t\tsale_month, claim_month,\n\t\t\t\t\t\tsum(expected_claims) AS expected_claims,\n\t\t\t\t\t\tsum(expected_claim_cost) AS expected_claim_cost,\n\t\t\t\t\t\tsum(expected_total_sales) AS expected_total_sales,\n\t\t\t\t\t\tsum(expected_total_fee) AS expected_total_fee,\n\t\t\t\t\t\tsum(expected_total_fee_uw) AS expected_total_fee_uw\n\t\t\t\t\tFROM (\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\trate_period_months, rate_id,\n\t\t\t\t\t\t\tsale_month, earned_month,\n\t\t\t\t\t\t\tfd_value.fd_month AS claim_month,\n\t\t\t\t\t\t\tfrequency, severity,\n\t\t\t\t\t\t\ttotal_sales * fd_value.value * frequency AS expected_claims,\n\t\t\t\t\t\t\ttotal_sales * fd_value.value * frequency * severity AS expected_claim_cost,\n\t\t\t\t\t\t\ttotal_sales * fd_value.value AS expected_total_sales,\n\t\t\t\t\t\t\ttotal_fee * fd_value.value AS expected_total_fee,\n\t\t\t\t\t\t\ttotal_fee_uw * fd_value.value AS expected_total_fee_uw\n\t\t\t\t\t\tFROM (\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\ts.rate_period_months AS rate_period_months, s.rate_id AS rate_id,\n\t\t\t\t\t\t\t\tsale_month, earned_month,\n\t\t\t\t\t\t\t\tfrequency, severity,\n\t\t\t\t\t\t\t\ttotal_sales, total_fee, total_fee_uw,\n\t\t\t\t\t\t\t\tARRAY(SELECT STRUCT(fd_month, sum(fd) as value) FROM (SELECT fd, CAST(FLOOR((num)/4) AS INT64) AS fd_month  FROM UNNEST(failure_distribution) fd WITH OFFSET AS num where num < earned_month*4 and num >= 0 * 4)w GROUP BY fd_month) as fd\n\t\t\t\t\t\t\tFROM (\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\trate_period_months, rate_id,\n\t\t\t\t\t\t\t\t\trate_frequency as frequency, rate_severity as severity,\n\t\t\t\t\t\t\t\t\tCAST(FLOOR((sale_week - 1)/4) as INT64) as sale_month,\n\t\t\t\t\t\t\t\t\t100 - FLOOR((sale_week - 1)/4) AS earned_month,\n\t\t\t\t\t\t\t\t\tSUM(sale_count) as total_sales,\n\t\t\t\t\t\t\t\t\tSUM(actual_merchant_whol_cost) as total_fee,\n\t\t\t\t\t\t\t\t\tSUM(actual_cover_provider_fee) as total_fee_uw\n\t\t\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\t\t\tanalytics_cover\n\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\tsale_week <= @saleWeekTo\n\t\t\t\t\t\t\t\tGROUP BY\n\t\t\t\t\t\t\t\t\trate_period_months, rate_id, frequency, severity, sale_month, earned_month\n\t\t\t\t\t\t\t)s\n\t\t\t\t\t\t\tINNER JOIN\n\t\t\t\t\t\t\t\tanalytics_failure_distribution AS fd\n\t\t\t\t\t\t\tON\n\t\t\t\t\t\t\t\ts.rate_period_months = fd.period_months\n\t\t\t\t\t\t)a\n\t\t\t\t\t\tCROSS JOIN UNNEST(fd) AS fd_value\n\t\t\t\t\t)\n\t\t\t\t\tGROUP BY sale_month, claim_month\n\t\t\t\t)b\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT\n\t\t\t\t\t\tsale_month, claim_month,\n\t\t\t\t\t\tclaim_count,\n\t\t\t\t\t\tclaim_cost\n\t\t\t\t\tFROM (\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\tCAST(FLOOR((sale_week - 1)/4) as INT64) as sale_month,\n\t\t\t\t\t\t\tCAST(FLOOR(claim_week/4) as INT64) as claim_month,\n\t\t\t\t\t\t\t100 - FLOOR((sale_week - 1)/4) AS earned_month,\n\t\t\t\t\t\t\tSUM(claim_count) AS claim_count,\n\t\t\t\t\t\t\tSUM(cost_excl_tax) AS claim_cost\n\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\tanalytics_claim\n\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\tsale_week <= @saleWeekTo\n\t\t\t\t\t\tGROUP BY\n\t\t\t\t\t\t\tsale_month, claim_month, earned_month\n\t\t\t\t\t)d\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tclaim_month <= earned_month\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tsale_month, claim_month\n\t\t\t\t)c\n\t\t\t\tON b.sale_month = c.sale_month AND b.claim_month = c.claim_month\n\t\t\t)e\n\t\t\tGROUP BY sale_month\n\t\t)f\n\t\tORDER BY sale_month\n\t\t\n\t\t)dist\n\t\tON\n\t\tsumm.sale_month = dist.sale_month\n\t\tORDER BY\n\t\t\tsale_month_index\n\t\t"

print(SQL_STMT)